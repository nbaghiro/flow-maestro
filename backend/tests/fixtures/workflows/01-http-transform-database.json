{
    "name": "HTTP Transform Database Workflow",
    "description": "Fetches data from HTTP endpoint, transforms it, and stores in database",
    "entryPoint": "input-1",
    "nodes": {
        "input-1": {
            "type": "input",
            "name": "Start",
            "config": {},
            "position": { "x": 100, "y": 100 }
        },
        "http-1": {
            "type": "http",
            "name": "Fetch User Data",
            "config": {
                "method": "GET",
                "url": "https://jsonplaceholder.typicode.com/users/${userId}",
                "timeout": 10000,
                "retryCount": 2
            },
            "position": { "x": 300, "y": 100 }
        },
        "transform-1": {
            "type": "transform",
            "name": "Extract User Info",
            "config": {
                "operation": "custom",
                "inputData": "${data}",
                "expression": "{ \"userId\": id, \"fullName\": name, \"email\": email, \"city\": address.city, \"company\": company.name }",
                "outputVariable": "userInfo"
            },
            "position": { "x": 500, "y": 100 }
        },
        "database-1": {
            "type": "database",
            "name": "Store User",
            "config": {
                "provider": "postgresql",
                "operation": "query",
                "host": "localhost",
                "port": 5432,
                "database": "flowmaestro",
                "username": "flowmaestro",
                "password": "flowmaestro_dev_password",
                "query": "INSERT INTO test_users (user_id, full_name, email, city, company) VALUES (${userInfo.userId}, '${userInfo.fullName}', '${userInfo.email}', '${userInfo.city}', '${userInfo.company}') RETURNING *",
                "outputVariable": "storedUser"
            },
            "position": { "x": 700, "y": 100 }
        },
        "output-1": {
            "type": "output",
            "name": "Result",
            "config": {
                "outputVariable": "result",
                "value": "${storedUser}"
            },
            "position": { "x": 900, "y": 100 }
        }
    },
    "edges": [
        {
            "id": "e1",
            "source": "input-1",
            "target": "http-1"
        },
        {
            "id": "e2",
            "source": "http-1",
            "target": "transform-1"
        },
        {
            "id": "e3",
            "source": "transform-1",
            "target": "database-1"
        },
        {
            "id": "e4",
            "source": "database-1",
            "target": "output-1"
        }
    ]
}
